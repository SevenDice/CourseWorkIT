#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab_4
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_BOOKS")]
	public partial class AGRODataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertPlaces(Places instance);
    partial void UpdatePlaces(Places instance);
    partial void DeletePlaces(Places instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertAnimals(Animals instance);
    partial void UpdateAnimals(Animals instance);
    partial void DeleteAnimals(Animals instance);
    partial void InsertCultures(Cultures instance);
    partial void UpdateCultures(Cultures instance);
    partial void DeleteCultures(Cultures instance);
    partial void InsertWorkers(Workers instance);
    partial void UpdateWorkers(Workers instance);
    partial void DeleteWorkers(Workers instance);
    #endregion
	
		
		//public AGRODataContext(string connection) : 
		//		base(connection, mappingSource)
		//{
		//	OnCreated();
		//}
		
		public AGRODataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AGRODataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AGRODataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Places> Places
		{
			get
			{
				return this.GetTable<Places>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventory
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<Animals> Animals
		{
			get
			{
				return this.GetTable<Animals>();
			}
		}
		
		public System.Data.Linq.Table<Cultures> Cultures
		{
			get
			{
				return this.GetTable<Cultures>();
			}
		}
		
		public System.Data.Linq.Table<Workers> Workers
		{
			get
			{
				return this.GetTable<Workers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Places")]
	public partial class Places : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdP;
		
		private string _Pname;
		
		private System.Nullable<double> _MPrice;
		
		private System.Nullable<int> _PCulture;
		
		private System.Nullable<int> _PAnimals;
		
		private EntitySet<Workers> _Workers;
		
		private EntityRef<Cultures> _Cultures;
		
		private EntityRef<Animals> _Animals;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPChanging(int value);
    partial void OnIdPChanged();
    partial void OnPnameChanging(string value);
    partial void OnPnameChanged();
    partial void OnMPriceChanging(System.Nullable<double> value);
    partial void OnMPriceChanged();
    partial void OnPCultureChanging(System.Nullable<int> value);
    partial void OnPCultureChanged();
    partial void OnPAnimalsChanging(System.Nullable<int> value);
    partial void OnPAnimalsChanged();
    #endregion
		
		public Places()
		{
			this._Workers = new EntitySet<Workers>(new Action<Workers>(this.attach_Workers), new Action<Workers>(this.detach_Workers));
			this._Cultures = default(EntityRef<Cultures>);
			this._Animals = default(EntityRef<Animals>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdP
		{
			get
			{
				return this._IdP;
			}
			set
			{
				if ((this._IdP != value))
				{
					this.OnIdPChanging(value);
					this.SendPropertyChanging();
					this._IdP = value;
					this.SendPropertyChanged("IdP");
					this.OnIdPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pname", DbType="NChar(50)")]
		public string Pname
		{
			get
			{
				return this._Pname;
			}
			set
			{
				if ((this._Pname != value))
				{
					this.OnPnameChanging(value);
					this.SendPropertyChanging();
					this._Pname = value;
					this.SendPropertyChanged("Pname");
					this.OnPnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPrice", DbType="Float")]
		public System.Nullable<double> MPrice
		{
			get
			{
				return this._MPrice;
			}
			set
			{
				if ((this._MPrice != value))
				{
					this.OnMPriceChanging(value);
					this.SendPropertyChanging();
					this._MPrice = value;
					this.SendPropertyChanged("MPrice");
					this.OnMPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PCulture", DbType="Int")]
		public System.Nullable<int> PCulture
		{
			get
			{
				return this._PCulture;
			}
			set
			{
				if ((this._PCulture != value))
				{
					if (this._Cultures.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPCultureChanging(value);
					this.SendPropertyChanging();
					this._PCulture = value;
					this.SendPropertyChanged("PCulture");
					this.OnPCultureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAnimals", DbType="Int")]
		public System.Nullable<int> PAnimals
		{
			get
			{
				return this._PAnimals;
			}
			set
			{
				if ((this._PAnimals != value))
				{
					if (this._Animals.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPAnimalsChanging(value);
					this.SendPropertyChanging();
					this._PAnimals = value;
					this.SendPropertyChanged("PAnimals");
					this.OnPAnimalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Places_Workers", Storage="_Workers", ThisKey="IdP", OtherKey="Place")]
		public EntitySet<Workers> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cultures_Places", Storage="_Cultures", ThisKey="PCulture", OtherKey="IdC", IsForeignKey=true)]
		public Cultures Cultures
		{
			get
			{
				return this._Cultures.Entity;
			}
			set
			{
				Cultures previousValue = this._Cultures.Entity;
				if (((previousValue != value) 
							|| (this._Cultures.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cultures.Entity = null;
						previousValue.Places.Remove(this);
					}
					this._Cultures.Entity = value;
					if ((value != null))
					{
						value.Places.Add(this);
						this._PCulture = value.IdC;
					}
					else
					{
						this._PCulture = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cultures");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animals_Places", Storage="_Animals", ThisKey="PAnimals", OtherKey="IdA", IsForeignKey=true)]
		public Animals Animals
		{
			get
			{
				return this._Animals.Entity;
			}
			set
			{
				Animals previousValue = this._Animals.Entity;
				if (((previousValue != value) 
							|| (this._Animals.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animals.Entity = null;
						previousValue.Places.Remove(this);
					}
					this._Animals.Entity = value;
					if ((value != null))
					{
						value.Places.Add(this);
						this._PAnimals = value.IdA;
					}
					else
					{
						this._PAnimals = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animals");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Places = this;
		}
		
		private void detach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Places = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdI;
		
		private string _IName;
		
		private System.Nullable<int> _Count;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<double> _MPrice;
		
		private EntitySet<Workers> _Workers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdIChanging(int value);
    partial void OnIdIChanged();
    partial void OnINameChanging(string value);
    partial void OnINameChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnMPriceChanging(System.Nullable<double> value);
    partial void OnMPriceChanged();
    #endregion
		
		public Inventory()
		{
			this._Workers = new EntitySet<Workers>(new Action<Workers>(this.attach_Workers), new Action<Workers>(this.detach_Workers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdI", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdI
		{
			get
			{
				return this._IdI;
			}
			set
			{
				if ((this._IdI != value))
				{
					this.OnIdIChanging(value);
					this.SendPropertyChanging();
					this._IdI = value;
					this.SendPropertyChanged("IdI");
					this.OnIdIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IName", DbType="NChar(50)")]
		public string IName
		{
			get
			{
				return this._IName;
			}
			set
			{
				if ((this._IName != value))
				{
					this.OnINameChanging(value);
					this.SendPropertyChanging();
					this._IName = value;
					this.SendPropertyChanged("IName");
					this.OnINameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MPrice", DbType="Float")]
		public System.Nullable<double> MPrice
		{
			get
			{
				return this._MPrice;
			}
			set
			{
				if ((this._MPrice != value))
				{
					this.OnMPriceChanging(value);
					this.SendPropertyChanging();
					this._MPrice = value;
					this.SendPropertyChanged("MPrice");
					this.OnMPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_Workers", Storage="_Workers", ThisKey="IdI", OtherKey="Inv")]
		public EntitySet<Workers> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_Workers(Workers entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animals")]
	public partial class Animals : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdA;
		
		private string _AName;
		
		private System.Nullable<int> _Count;
		
		private System.Nullable<double> _MarketPrice;
		
		private EntitySet<Places> _Places;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAChanging(int value);
    partial void OnIdAChanged();
    partial void OnANameChanging(string value);
    partial void OnANameChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    partial void OnMarketPriceChanging(System.Nullable<double> value);
    partial void OnMarketPriceChanged();
    #endregion
		
		public Animals()
		{
			this._Places = new EntitySet<Places>(new Action<Places>(this.attach_Places), new Action<Places>(this.detach_Places));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdA", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdA
		{
			get
			{
				return this._IdA;
			}
			set
			{
				if ((this._IdA != value))
				{
					this.OnIdAChanging(value);
					this.SendPropertyChanging();
					this._IdA = value;
					this.SendPropertyChanged("IdA");
					this.OnIdAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AName", DbType="NChar(50)")]
		public string AName
		{
			get
			{
				return this._AName;
			}
			set
			{
				if ((this._AName != value))
				{
					this.OnANameChanging(value);
					this.SendPropertyChanging();
					this._AName = value;
					this.SendPropertyChanged("AName");
					this.OnANameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketPrice", DbType="Float")]
		public System.Nullable<double> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animals_Places", Storage="_Places", ThisKey="IdA", OtherKey="PAnimals")]
		public EntitySet<Places> Places
		{
			get
			{
				return this._Places;
			}
			set
			{
				this._Places.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Places(Places entity)
		{
			this.SendPropertyChanging();
			entity.Animals = this;
		}
		
		private void detach_Places(Places entity)
		{
			this.SendPropertyChanging();
			entity.Animals = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cultures")]
	public partial class Cultures : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdC;
		
		private string _Cname;
		
		private System.Nullable<double> _MarketPrice;
		
		private System.Nullable<int> _Count;
		
		private EntitySet<Places> _Places;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCChanging(int value);
    partial void OnIdCChanged();
    partial void OnCnameChanging(string value);
    partial void OnCnameChanged();
    partial void OnMarketPriceChanging(System.Nullable<double> value);
    partial void OnMarketPriceChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    #endregion
		
		public Cultures()
		{
			this._Places = new EntitySet<Places>(new Action<Places>(this.attach_Places), new Action<Places>(this.detach_Places));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdC", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdC
		{
			get
			{
				return this._IdC;
			}
			set
			{
				if ((this._IdC != value))
				{
					this.OnIdCChanging(value);
					this.SendPropertyChanging();
					this._IdC = value;
					this.SendPropertyChanged("IdC");
					this.OnIdCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cname", DbType="NChar(50)")]
		public string Cname
		{
			get
			{
				return this._Cname;
			}
			set
			{
				if ((this._Cname != value))
				{
					this.OnCnameChanging(value);
					this.SendPropertyChanging();
					this._Cname = value;
					this.SendPropertyChanged("Cname");
					this.OnCnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketPrice", DbType="Float")]
		public System.Nullable<double> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cultures_Places", Storage="_Places", ThisKey="IdC", OtherKey="PCulture")]
		public EntitySet<Places> Places
		{
			get
			{
				return this._Places;
			}
			set
			{
				this._Places.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Places(Places entity)
		{
			this.SendPropertyChanging();
			entity.Cultures = this;
		}
		
		private void detach_Places(Places entity)
		{
			this.SendPropertyChanging();
			entity.Cultures = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workers")]
	public partial class Workers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdW;
		
		private string _FName;
		
		private string _SName;
		
		private string _TName;
		
		private System.Nullable<double> _Wage;
		
		private System.Nullable<int> _Inv;
		
		private System.Nullable<int> _Place;
		
		private string _Login;
		
		private string _Password;
		
		private EntityRef<Places> _Places;
		
		private EntityRef<Inventory> _Inventory;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdWChanging(int value);
    partial void OnIdWChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnSNameChanging(string value);
    partial void OnSNameChanged();
    partial void OnTNameChanging(string value);
    partial void OnTNameChanged();
    partial void OnWageChanging(System.Nullable<double> value);
    partial void OnWageChanged();
    partial void OnInvChanging(System.Nullable<int> value);
    partial void OnInvChanged();
    partial void OnPlaceChanging(System.Nullable<int> value);
    partial void OnPlaceChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Workers()
		{
			this._Places = default(EntityRef<Places>);
			this._Inventory = default(EntityRef<Inventory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdW", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdW
		{
			get
			{
				return this._IdW;
			}
			set
			{
				if ((this._IdW != value))
				{
					this.OnIdWChanging(value);
					this.SendPropertyChanging();
					this._IdW = value;
					this.SendPropertyChanged("IdW");
					this.OnIdWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="NChar(20)")]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SName", DbType="NChar(20)")]
		public string SName
		{
			get
			{
				return this._SName;
			}
			set
			{
				if ((this._SName != value))
				{
					this.OnSNameChanging(value);
					this.SendPropertyChanging();
					this._SName = value;
					this.SendPropertyChanged("SName");
					this.OnSNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TName", DbType="NChar(20)")]
		public string TName
		{
			get
			{
				return this._TName;
			}
			set
			{
				if ((this._TName != value))
				{
					this.OnTNameChanging(value);
					this.SendPropertyChanging();
					this._TName = value;
					this.SendPropertyChanged("TName");
					this.OnTNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wage", DbType="Float")]
		public System.Nullable<double> Wage
		{
			get
			{
				return this._Wage;
			}
			set
			{
				if ((this._Wage != value))
				{
					this.OnWageChanging(value);
					this.SendPropertyChanging();
					this._Wage = value;
					this.SendPropertyChanged("Wage");
					this.OnWageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inv", DbType="Int")]
		public System.Nullable<int> Inv
		{
			get
			{
				return this._Inv;
			}
			set
			{
				if ((this._Inv != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvChanging(value);
					this.SendPropertyChanging();
					this._Inv = value;
					this.SendPropertyChanged("Inv");
					this.OnInvChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="Int")]
		public System.Nullable<int> Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					if (this._Places.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NChar(10)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(10)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Places_Workers", Storage="_Places", ThisKey="Place", OtherKey="IdP", IsForeignKey=true)]
		public Places Places
		{
			get
			{
				return this._Places.Entity;
			}
			set
			{
				Places previousValue = this._Places.Entity;
				if (((previousValue != value) 
							|| (this._Places.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Places.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Places.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._Place = value.IdP;
					}
					else
					{
						this._Place = default(Nullable<int>);
					}
					this.SendPropertyChanged("Places");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_Workers", Storage="_Inventory", ThisKey="Inv", OtherKey="IdI", IsForeignKey=true)]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._Inv = value.IdI;
					}
					else
					{
						this._Inv = default(Nullable<int>);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
